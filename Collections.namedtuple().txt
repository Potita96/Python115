//collections.namedtuple()
Basically, namedtuples are easy to create, lightweight object types.
They turn tuples into convenient containers for simple tasks.
With namedtuples, you donâ€™t have to use integer indices for accessing members of a tuple.

Example

Code 01

>>> from collections import namedtuple
>>> Point = namedtuple('Point','x,y')
>>> pt1 = Point(1,2)
>>> pt2 = Point(3,4)
>>> dot_product = ( pt1.x * pt2.x ) +( pt1.y * pt2.y )
>>> print dot_product
11

Code 02

>>> from collections import namedtuple
>>> Car = namedtuple('Car','Price Mileage Colour Class')
>>> xyz = Car(Price = 100000, Mileage = 30, Colour = 'Cyan', Class = 'Y')
>>> print xyz
Car(Price=100000, Mileage=30, Colour='Cyan', Class='Y')
>>> print xyz.Class
Y

Task

Dr. John Wesley has a spreadsheet containing a list of student's IDs, marks, class, and name.

Your task is to help Dr. Wesley calculate the average marks of the students.

Average = Sum of all marks / Total Students

Note:
1.Columns can be in any order. IDs, marks, class, and name can be written in any order in the spreadsheet.
2.Column names are ID, MARKS, CLASS, and NAME. (The spelling and case type of these names won't change.)//





CODE:
from collections import namedtuple

N = int(input())

Std_lst = []

for i in range(N+1):
    
    if i == 0:
        header = input()
        Students = namedtuple('Students',header)
    else:
        student = input().split()
        Std_lst.append(Students(student[0],student[1],student[2], student[3]))

std_sum = 0
for std in Std_lst:
    std_sum += int(std.MARKS)

print(std_sum/N)






Input (stdin)
5
ID         MARKS      NAME       CLASS
1          97         Raymond    7
2          50         Steven     4
3          91         Adrian     9
4          72         Stewart    5
5          80         Peter      6
Expected Output
78.00